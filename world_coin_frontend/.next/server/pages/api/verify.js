"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/verify";
exports.ids = ["pages/api/verify"];
exports.modules = {

/***/ "(api)/./src/pages/api/verify.ts":
/*!*********************************!*\
  !*** ./src/pages/api/verify.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"config\": () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nconst config = {\n    api: {\n        externalResolver: true\n    }\n};\nconst verifyEndpoint = `${\"https://developer.worldcoin.org\"}/api/v1/verify/${\"app_staging_2d9ab8b28f586d78900b5b47e24af304\"}`;\nfunction handler(req, res) {\n    //   return new Promise((resolve, reject) => {\n    console.log(\"Received request to verify credential:\\n\", req.body);\n    const reqBody = {\n        nullifier_hash: req.body.nullifier_hash,\n        merkle_root: req.body.merkle_root,\n        proof: req.body.proof,\n        verification_level: req.body.verification_level,\n        action: req.body.action,\n        signal: req.body.signal\n    };\n    console.log(\"Sending request to World ID /verify endpoint:\\n\", reqBody);\n    fetch(verifyEndpoint, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(reqBody)\n    }).then((verifyRes)=>{\n        verifyRes.json().then((wldResponse)=>{\n            console.log(`Received ${verifyRes.status} response from World ID /verify endpoint:\\n`, wldResponse);\n            if (verifyRes.status == 200) {\n                // This is where you should perform backend actions based on the verified credential, such as setting a user as \"verified\" in a database\n                // For this example, we'll just return a 200 response and console.log the verified credential\n                console.log(\"Credential verified! This user's nullifier hash is: \", wldResponse.nullifier_hash);\n                res.status(verifyRes.status).send({\n                    code: \"success\",\n                    detail: \"This action verified correctly!\"\n                });\n            //   resolve(void 0);\n            } else {\n                // This is where you should handle errors from the World ID /verify endpoint. Usually these errors are due to an invalid credential or a credential that has already been used.\n                // For this example, we'll just return the error code and detail from the World ID /verify endpoint.\n                res.status(verifyRes.status).send({\n                    code: wldResponse.code,\n                    detail: wldResponse.detail\n                });\n            }\n        });\n    });\n//   });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL3ZlcmlmeS50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUVPLE1BQU1BLFNBQVM7SUFDcEJDLEtBQUs7UUFDSEMsa0JBQWtCLElBQUk7SUFDeEI7QUFDRixFQUFFO0FBT0YsTUFBTUMsaUJBQWlCLENBQUMsRUFBRUMsaUNBQXdDLENBQUMsZUFBZSxFQUFFQSw4Q0FBa0MsQ0FBQyxDQUFDO0FBRXpHLFNBQVNJLFFBQ3RCQyxHQUFtQixFQUNuQkMsR0FBaUMsRUFDakM7SUFDQSw4Q0FBOEM7SUFDOUNDLFFBQVFDLEdBQUcsQ0FBQyw0Q0FBNENILElBQUlJLElBQUk7SUFDaEUsTUFBTUMsVUFBVTtRQUNkQyxnQkFBZ0JOLElBQUlJLElBQUksQ0FBQ0UsY0FBYztRQUN2Q0MsYUFBYVAsSUFBSUksSUFBSSxDQUFDRyxXQUFXO1FBQ2pDQyxPQUFPUixJQUFJSSxJQUFJLENBQUNJLEtBQUs7UUFDckJDLG9CQUFvQlQsSUFBSUksSUFBSSxDQUFDSyxrQkFBa0I7UUFDL0NDLFFBQVFWLElBQUlJLElBQUksQ0FBQ00sTUFBTTtRQUN2QkMsUUFBUVgsSUFBSUksSUFBSSxDQUFDTyxNQUFNO0lBQ3pCO0lBQ0FULFFBQVFDLEdBQUcsQ0FBQyxtREFBbURFO0lBQy9ETyxNQUFNbEIsZ0JBQWdCO1FBQ3BCbUIsUUFBUTtRQUNSQyxTQUFTO1lBQ1AsZ0JBQWdCO1FBQ2xCO1FBQ0FWLE1BQU1XLEtBQUtDLFNBQVMsQ0FBQ1g7SUFDdkIsR0FBR1ksSUFBSSxDQUFDLENBQUNDLFlBQWM7UUFDckJBLFVBQVVDLElBQUksR0FBR0YsSUFBSSxDQUFDLENBQUNHLGNBQWdCO1lBQ3JDbEIsUUFBUUMsR0FBRyxDQUNULENBQUMsU0FBUyxFQUFFZSxVQUFVRyxNQUFNLENBQUMsMkNBQTJDLENBQUMsRUFDekVEO1lBRUYsSUFBSUYsVUFBVUcsTUFBTSxJQUFJLEtBQUs7Z0JBQzNCLHdJQUF3STtnQkFDeEksNkZBQTZGO2dCQUM3Rm5CLFFBQVFDLEdBQUcsQ0FDVCx3REFDQWlCLFlBQVlkLGNBQWM7Z0JBRTVCTCxJQUFJb0IsTUFBTSxDQUFDSCxVQUFVRyxNQUFNLEVBQUVDLElBQUksQ0FBQztvQkFDaENDLE1BQU07b0JBQ05DLFFBQVE7Z0JBQ1Y7WUFDQSxxQkFBcUI7WUFDdkIsT0FBTztnQkFDTCwrS0FBK0s7Z0JBQy9LLG9HQUFvRztnQkFDcEd2QixJQUNHb0IsTUFBTSxDQUFDSCxVQUFVRyxNQUFNLEVBQ3ZCQyxJQUFJLENBQUM7b0JBQUVDLE1BQU1ILFlBQVlHLElBQUk7b0JBQUVDLFFBQVFKLFlBQVlJLE1BQU07Z0JBQUM7WUFDL0QsQ0FBQztRQUNIO0lBQ0Y7QUFDQSxRQUFRO0FBQ1YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkLWlkLWNsb3VkLXRlbXBsYXRlLy4vc3JjL3BhZ2VzL2FwaS92ZXJpZnkudHM/ZmUyNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5leHRBcGlSZXF1ZXN0LCBOZXh0QXBpUmVzcG9uc2UgfSBmcm9tIFwibmV4dFwiO1xuXG5leHBvcnQgY29uc3QgY29uZmlnID0ge1xuICBhcGk6IHtcbiAgICBleHRlcm5hbFJlc29sdmVyOiB0cnVlLFxuICB9LFxufTtcblxuZXhwb3J0IHR5cGUgVmVyaWZ5UmVwbHkgPSB7XG4gIGNvZGU6IHN0cmluZztcbiAgZGV0YWlsOiBzdHJpbmc7XG59O1xuXG5jb25zdCB2ZXJpZnlFbmRwb2ludCA9IGAke3Byb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1dMRF9BUElfQkFTRV9VUkx9L2FwaS92MS92ZXJpZnkvJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19XTERfQVBQX0lEfWA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZXIoXG4gIHJlcTogTmV4dEFwaVJlcXVlc3QsXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlPFZlcmlmeVJlcGx5PlxuKSB7XG4gIC8vICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgY29uc29sZS5sb2coXCJSZWNlaXZlZCByZXF1ZXN0IHRvIHZlcmlmeSBjcmVkZW50aWFsOlxcblwiLCByZXEuYm9keSk7XG4gIGNvbnN0IHJlcUJvZHkgPSB7XG4gICAgbnVsbGlmaWVyX2hhc2g6IHJlcS5ib2R5Lm51bGxpZmllcl9oYXNoLFxuICAgIG1lcmtsZV9yb290OiByZXEuYm9keS5tZXJrbGVfcm9vdCxcbiAgICBwcm9vZjogcmVxLmJvZHkucHJvb2YsXG4gICAgdmVyaWZpY2F0aW9uX2xldmVsOiByZXEuYm9keS52ZXJpZmljYXRpb25fbGV2ZWwsXG4gICAgYWN0aW9uOiByZXEuYm9keS5hY3Rpb24sXG4gICAgc2lnbmFsOiByZXEuYm9keS5zaWduYWwsXG4gIH07XG4gIGNvbnNvbGUubG9nKFwiU2VuZGluZyByZXF1ZXN0IHRvIFdvcmxkIElEIC92ZXJpZnkgZW5kcG9pbnQ6XFxuXCIsIHJlcUJvZHkpO1xuICBmZXRjaCh2ZXJpZnlFbmRwb2ludCwge1xuICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgfSxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXFCb2R5KSxcbiAgfSkudGhlbigodmVyaWZ5UmVzKSA9PiB7XG4gICAgdmVyaWZ5UmVzLmpzb24oKS50aGVuKCh3bGRSZXNwb25zZSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGBSZWNlaXZlZCAke3ZlcmlmeVJlcy5zdGF0dXN9IHJlc3BvbnNlIGZyb20gV29ybGQgSUQgL3ZlcmlmeSBlbmRwb2ludDpcXG5gLFxuICAgICAgICB3bGRSZXNwb25zZVxuICAgICAgKTtcbiAgICAgIGlmICh2ZXJpZnlSZXMuc3RhdHVzID09IDIwMCkge1xuICAgICAgICAvLyBUaGlzIGlzIHdoZXJlIHlvdSBzaG91bGQgcGVyZm9ybSBiYWNrZW5kIGFjdGlvbnMgYmFzZWQgb24gdGhlIHZlcmlmaWVkIGNyZWRlbnRpYWwsIHN1Y2ggYXMgc2V0dGluZyBhIHVzZXIgYXMgXCJ2ZXJpZmllZFwiIGluIGEgZGF0YWJhc2VcbiAgICAgICAgLy8gRm9yIHRoaXMgZXhhbXBsZSwgd2UnbGwganVzdCByZXR1cm4gYSAyMDAgcmVzcG9uc2UgYW5kIGNvbnNvbGUubG9nIHRoZSB2ZXJpZmllZCBjcmVkZW50aWFsXG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgIFwiQ3JlZGVudGlhbCB2ZXJpZmllZCEgVGhpcyB1c2VyJ3MgbnVsbGlmaWVyIGhhc2ggaXM6IFwiLFxuICAgICAgICAgIHdsZFJlc3BvbnNlLm51bGxpZmllcl9oYXNoXG4gICAgICAgICk7XG4gICAgICAgIHJlcy5zdGF0dXModmVyaWZ5UmVzLnN0YXR1cykuc2VuZCh7XG4gICAgICAgICAgY29kZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgZGV0YWlsOiBcIlRoaXMgYWN0aW9uIHZlcmlmaWVkIGNvcnJlY3RseSFcIixcbiAgICAgICAgfSk7XG4gICAgICAgIC8vICAgcmVzb2x2ZSh2b2lkIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyB3aGVyZSB5b3Ugc2hvdWxkIGhhbmRsZSBlcnJvcnMgZnJvbSB0aGUgV29ybGQgSUQgL3ZlcmlmeSBlbmRwb2ludC4gVXN1YWxseSB0aGVzZSBlcnJvcnMgYXJlIGR1ZSB0byBhbiBpbnZhbGlkIGNyZWRlbnRpYWwgb3IgYSBjcmVkZW50aWFsIHRoYXQgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlxuICAgICAgICAvLyBGb3IgdGhpcyBleGFtcGxlLCB3ZSdsbCBqdXN0IHJldHVybiB0aGUgZXJyb3IgY29kZSBhbmQgZGV0YWlsIGZyb20gdGhlIFdvcmxkIElEIC92ZXJpZnkgZW5kcG9pbnQuXG4gICAgICAgIHJlc1xuICAgICAgICAgIC5zdGF0dXModmVyaWZ5UmVzLnN0YXR1cylcbiAgICAgICAgICAuc2VuZCh7IGNvZGU6IHdsZFJlc3BvbnNlLmNvZGUsIGRldGFpbDogd2xkUmVzcG9uc2UuZGV0YWlsIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgLy8gICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJjb25maWciLCJhcGkiLCJleHRlcm5hbFJlc29sdmVyIiwidmVyaWZ5RW5kcG9pbnQiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfV0xEX0FQSV9CQVNFX1VSTCIsIk5FWFRfUFVCTElDX1dMRF9BUFBfSUQiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwiY29uc29sZSIsImxvZyIsImJvZHkiLCJyZXFCb2R5IiwibnVsbGlmaWVyX2hhc2giLCJtZXJrbGVfcm9vdCIsInByb29mIiwidmVyaWZpY2F0aW9uX2xldmVsIiwiYWN0aW9uIiwic2lnbmFsIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiSlNPTiIsInN0cmluZ2lmeSIsInRoZW4iLCJ2ZXJpZnlSZXMiLCJqc29uIiwid2xkUmVzcG9uc2UiLCJzdGF0dXMiLCJzZW5kIiwiY29kZSIsImRldGFpbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/verify.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/verify.ts"));
module.exports = __webpack_exports__;

})();